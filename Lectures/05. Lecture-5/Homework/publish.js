
let Web3 = require('web3');

var web3 = new Web3('http://localhost:7545');


let abi  = [
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"internalType": "address",
				"name": "by",
				"type": "address"
			},
			{
				"indexed": true,
				"internalType": "enum Pokemons.Pokemon",
				"name": "pokemon",
				"type": "uint8"
			}
		],
		"name": "LogPokemonCaught",
		"type": "event"
	},
	{
		"inputs": [
			{
				"internalType": "enum Pokemons.Pokemon",
				"name": "pokemon",
				"type": "uint8"
			}
		],
		"name": "catchPokemon",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "address",
				"name": "person",
				"type": "address"
			}
		],
		"name": "getPokemonByPerson",
		"outputs": [
			{
				"internalType": "enum Pokemons.Pokemon[]",
				"name": "",
				"type": "uint8[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "enum Pokemons.Pokemon",
				"name": "pokemon",
				"type": "uint8"
			}
		],
		"name": "getPokemonHolders",
		"outputs": [
			{
				"internalType": "address[]",
				"name": "",
				"type": "address[]"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
]
let bytecode = "608060405234801561001057600080fd5b50610929806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806333a56c1f146100465780638675640b14610076578063fd3c783a146100a6575b600080fd5b610060600480360381019061005b919061053d565b6100c2565b60405161006d919061070a565b60405180910390f35b610090600480360381019061008b919061056a565b610190565b60405161009d91906106e8565b60405180910390f35b6100c060048036038101906100bb919061056a565b610243565b005b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180548060200260200160405190810160405280929190818152602001828054801561018457602002820191906000526020600020906000905b82829054906101000a900460ff16601f81111561015e5761015d610884565b5b8152602001906001019060208260000104928301926001038202915080841161013e5790505b50505050509050919050565b60606001600083601f8111156101a9576101a8610884565b5b815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561023757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116101ed575b50505050509050919050565b3381600f6000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154610293919061079e565b421161029e57600080fd5b6102a882826104c0565b156102b257600080fd5b6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018390806001815401808255809150506001900390600052602060002090602091828204019190069091909190916101000a81548160ff0219169083601f8111156103405761033f610884565b5b0217905550426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506001600084601f8111156103a2576103a1610884565b5b8152602001908152602001600020339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160026000338660405160200161042a9291906106bf565b60405160208183030381529060405280519060200120815260200190815260200160002060006101000a81548160ff02191690831515021790555082601f81111561047857610477610884565b5b3373ffffffffffffffffffffffffffffffffffffffff167f38f3d86cab42835e18b9ff5ed00cd76b722b92c435ad0d9aa170939ac7d499f560405160405180910390a3505050565b60006002600084846040516020016104d99291906106bf565b60405160208183030381529060405280519060200120815260200190815260200160002060009054906101000a900460ff16905092915050565b600081359050610522816108cc565b92915050565b600081359050610537816108e3565b92915050565b600060208284031215610553576105526108b3565b5b600061056184828501610513565b91505092915050565b6000602082840312156105805761057f6108b3565b5b600061058e84828501610528565b91505092915050565b60006105a383836105c7565b60208301905092915050565b60006105bb83836106a1565b60208301905092915050565b6105d0816107f4565b82525050565b6105df816107f4565b82525050565b60006105f08261074c565b6105fa818561077c565b93506106058361072c565b8060005b8381101561063657815161061d8882610597565b975061062883610762565b925050600181019050610609565b5085935050505092915050565b600061064e82610757565b610658818561078d565b93506106638361073c565b8060005b8381101561069457815161067b88826105af565b97506106868361076f565b925050600181019050610667565b5085935050505092915050565b6106aa81610843565b82525050565b6106b981610843565b82525050565b60006040820190506106d460008301856105d6565b6106e160208301846106b0565b9392505050565b6000602082019050818103600083015261070281846105e5565b905092915050565b600060208201905081810360008301526107248184610643565b905092915050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b60006107a982610839565b91506107b483610839565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107e9576107e8610855565b5b828201905092915050565b60006107ff82610819565b9050919050565b6000819050610814826108b8565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061084e82610806565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b602081106108c9576108c8610884565b5b50565b6108d5816107f4565b81146108e057600080fd5b50565b602081106108f057600080fd5b5056fea26469706673582212202fed54ae93fe1455037a864a3356e5a304d7bf17d24b4dfad5cdfcd8cb4a8f9364736f6c63430008070033";

let Contract = new web3.eth.Contract(abi);

let publishData = {
    "from" : 0x4fB3e956afE413A81B22574760ab8d276ad7255F, // the account from which it will be published
    "data" : bytecode,
    "gas" : 4000000 // gas limit. This should be the same or lower then Ethereum gas limit
}

Contract.new(publishData, function(err, contractInstance) {
    if(!err) {
        if(contractInstance.address) { // if the contract has an address aka if the transaction is mined
            console.log("New contract address is:", contractInstance.address);
        }

    } else {
        console.error(err); // something went wrong
    }
   
});